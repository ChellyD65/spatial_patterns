{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"colo",
				"color_norm"
			],
			[
				"si",
				"sigma_exc"
			],
			[
				"sigma",
				"sigma_inh"
			],
			[
				"sigm",
				"sigma_inh"
			],
			[
				"par",
				"parameter_name"
			],
			[
				"vaire",
				"varied_parameter_array"
			],
			[
				"varie",
				"varied_parameter"
			],
			[
				"initial",
				"initial_x"
			],
			[
				"color",
				"color_cycle_blue3"
			],
			[
				"cell",
				"cell_type"
			],
			[
				"arrow",
				"arrowlength"
			],
			[
				"arro",
				"arrowopts"
			],
			[
				"aro",
				"arrowopts"
			],
			[
				"scal",
				"scaling_factor"
			],
			[
				"inh",
				"inhibitory_plasticity"
			],
			[
				"exc",
				"excitatory_plasticity"
			],
			[
				"legend",
				"legend_loc"
			],
			[
				"syn",
				"syn_type"
			],
			[
				"weights",
				"weights_vs_centers"
			],
			[
				"dimension",
				"dimensions"
			],
			[
				"out",
				"output_rate_grid_shape"
			],
			[
				"outpu",
				"output_rate_grid_shape"
			],
			[
				"every",
				"every_nth_step_weights"
			],
			[
				"every_nth",
				"every_nth_step_weights"
			],
			[
				"font",
				"fontsize"
			],
			[
				"xtick",
				"xticklabels"
			],
			[
				"target",
				"target_rate"
			],
			[
				"tar",
				"target_rate"
			],
			[
				"fir",
				"firing_rates"
			],
			[
				"tarte",
				"target_rate_distance"
			],
			[
				"ouput",
				"output_rate_distance"
			],
			[
				"general",
				"general_settings"
			],
			[
				"gener",
				"general_settings"
			],
			[
				"inhi",
				"Inhibitory"
			],
			[
				"posi",
				"populations  (variable)"
			],
			[
				"veloc",
				"velocity_dt"
			],
			[
				"outb",
				"out_of_bounds_z"
			],
			[
				"move",
				"move_persistently_semi_periodic"
			],
			[
				"center",
				"center_overlap_exc"
			],
			[
				"initwei",
				"init_weight_exc"
			],
			[
				"lins",
				"linspaces"
			],
			[
				"pol",
				"populations"
			],
			[
				"inpu",
				"input_rates"
			],
			[
				"possi",
				"possible_x_positions"
			],
			[
				"possibl",
				"possible_positions"
			],
			[
				"get",
				"get_ParametersNamed"
			],
			[
				"poss",
				"possible_positions_grid"
			],
			[
				"numb",
				"number_per_dimension"
			],
			[
				"number",
				"number_per_dimension_inh"
			],
			[
				"num",
				"number_per_dimension"
			],
			[
				"dist",
				"distortion"
			],
			[
				"Y",
				"Y"
			],
			[
				"nexc",
				"n_exc_y"
			],
			[
				"di",
				"diffusive"
			],
			[
				"nin",
				"n_inh_x"
			],
			[
				"plot",
				"plot_polar"
			],
			[
				"temp",
				"tempdir_new"
			],
			[
				"getlo",
				"getlogin"
			],
			[
				"scale",
				"scaled_kappa"
			],
			[
				"as",
				"asymmetric_gaussians"
			],
			[
				"init",
				"init_weight_inh"
			],
			[
				"weih",
				"weight_overlap"
			],
			[
				"poso",
				"position"
			],
			[
				"flatte",
				"flatten_params_to_point  (function)"
			],
			[
				"weighto",
				"weight_overlap"
			],
			[
				"sigmex",
				"sigma_exc"
			],
			[
				"Param",
				"ParametersNamed"
			],
			[
				"weighov",
				"weight_overlap"
			],
			[
				"Parame",
				"ParameterArray"
			],
			[
				"weightover",
				"weight_overlap_exc"
			],
			[
				"weightoverl",
				"weight_overlap_inh"
			],
			[
				"weig",
				"weight_overlap_exc"
			],
			[
				"wei",
				"weight_overlap_exc"
			],
			[
				"weighoverex",
				"weight_overlap_exc"
			],
			[
				"weighover",
				"weight_overlap_inh"
			],
			[
				"weigh",
				"weight_overlap"
			],
			[
				"weight",
				"weight_overlap_inh"
			],
			[
				"weiho",
				"weight_overlap_inh"
			],
			[
				"sigmaexc",
				"sigma_exc_y"
			],
			[
				"centers",
				"centers_y"
			],
			[
				"init_weig",
				"init_weight_exc"
			],
			[
				"sigminh",
				"sigma_inh_y"
			],
			[
				"sigman",
				"sigma_inh"
			],
			[
				"outof",
				"out_of_bounds_horizontal"
			],
			[
				"index",
				"index_y"
			],
			[
				"number_of",
				"number_of_different_colors"
			],
			[
				"sig",
				"sigma_exc"
			],
			[
				"x",
				"xdistances"
			],
			[
				"fact",
				"factor_GABA"
			],
			[
				"dista",
				"distance_between_neurons"
			],
			[
				"position",
				"positions_grid"
			],
			[
				"seta",
				"set_aspect"
			],
			[
				"condi",
				"condition1"
			],
			[
				"posit",
				"positions_grid"
			],
			[
				"velo",
				"velocity_dt"
			],
			[
				"upda",
				"update_inh_weights  (function)"
			],
			[
				"initi",
				"initial_squared_weight_sum"
			],
			[
				"input",
				"input_space_resolution"
			],
			[
				"plotmean",
				"plot_mean_inter_peak_distance"
			],
			[
				"distanc",
				"distances_between_peaks"
			],
			[
				"distan",
				"distances_between_peaks"
			],
			[
				"maxima",
				"maxima_boolean"
			],
			[
				"output",
				"output_rates"
			],
			[
				"simulation",
				"simulation_time"
			],
			[
				"boundar",
				"boundary_conditions"
			],
			[
				"plot_oup",
				"plot_output_rates_from_equation"
			],
			[
				"func",
				"function_kwargs"
			],
			[
				"box",
				"boxlength"
			],
			[
				"grid",
				"grid_spacing"
			],
			[
				"com",
				"comment3	Comment3"
			],
			[
				"snep",
				"snep_plotting"
			],
			[
				"set",
				"set_spacing_and_quality_of_1d_grid  (function)"
			],
			[
				"rawdat",
				"rawdata"
			],
			[
				"get_outpu",
				"get_output_rates_from_equation"
			],
			[
				"upd",
				"update_inh_weights  (function)"
			],
			[
				"update",
				"update_exc_weights  (function)"
			],
			[
				"plotout",
				"plot_output_rates_from_equation"
			],
			[
				"targe",
				"target_rate"
			],
			[
				"ini",
				"init_weight_inh"
			],
			[
				"iniwei",
				"init_weight_exc"
			],
			[
				"lateral",
				"lateral_inhibition"
			],
			[
				"plot_outpu",
				"plot_output_rates_from_file"
			],
			[
				"equi",
				"equilibration_steps"
			],
			[
				"equili",
				"equilibration_steps=2000"
			],
			[
				"thre",
				"threshold_difference"
			],
			[
				"neighbor",
				"neighborhood_size"
			],
			[
				"cuto",
				"cut_off_value"
			],
			[
				"getco",
				"get_auto_correlation_2d"
			]
		]
	},
	"buffers":
	[
		{
			"file": "experiment_using_snep.py",
			"settings":
			{
				"buffer_size": 17770,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "UNREGISTERED: Please visit http://sublime.wbond.net/svn\nWorking copy: /Users/simonweber/programming/workspace\nCommand: svn log -v -l 20 learning_grids/experiment_using_snep.py\n================================================================================\n\nr754 | weber | 2014-08-05 11:26:27 +0200 (Tue, 05 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\nSimulation: Grid cells in circular enclosure\n\n------------------------------------------------------------------------\n\nr753 | weber | 2014-08-05 11:01:07 +0200 (Tue, 05 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\nSimulation: grid spacing vs sigma inh FINAL\n\n------------------------------------------------------------------------\n\nr752 | weber | 2014-08-05 10:59:08 +0200 (Tue, 05 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\ntest\n\n------------------------------------------------------------------------\n\nr751 | weber | 2014-08-05 10:57:46 +0200 (Tue, 05 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\ntest\n\n------------------------------------------------------------------------\n\nr750 | weber | 2014-08-05 10:54:39 +0200 (Tue, 05 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\nSimulation: grid spacing vs sigma_inh repaired\n\n------------------------------------------------------------------------\n\nr749 | weber | 2014-08-05 10:22:45 +0200 (Tue, 05 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\nSimulation: Place Cells\n\n------------------------------------------------------------------------\n\nr748 | weber | 2014-08-04 23:06:22 +0200 (Mon, 04 Aug 2014) | 2 lines\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n   M /workspace/learning_grids/initialization.py\n\nRepaired axis issue in get_rates_function, sucht that symmetric fields\nwork again\n\n------------------------------------------------------------------------\n\nr747 | weber | 2014-08-04 22:42:22 +0200 (Mon, 04 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n   M /workspace/learning_grids/initialization.py\n   M /workspace/learning_grids/learning_grids.sublime-workspace\n\nAsymmetric and not von Mises works again\n\n------------------------------------------------------------------------\n\nr746 | weber | 2014-08-04 19:00:48 +0200 (Mon, 04 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\nType commit message hereâ€¦\n\n------------------------------------------------------------------------\n\nr745 | weber | 2014-08-04 18:59:50 +0200 (Mon, 04 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/analytics/linear_stability_analysis.py\n   M /workspace/learning_grids/experiment_using_snep.py\n   M /workspace/learning_grids/figures/2dim_cell_types.py\n   M /workspace/learning_grids/plot.py\n   M /workspace/learning_grids/plotting.py\n\nSimulation: grid spacing vs sigma_inh NEW\n\n------------------------------------------------------------------------\n\nr744 | weber | 2014-08-04 12:22:06 +0200 (Mon, 04 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n   M /workspace/learning_grids/figures/1d_center_surround.py\n   M /workspace/learning_grids/figures/input_tuning.py\n   M /workspace/learning_grids/learning_grids.sublime-workspace\n   M /workspace/learning_grids/plot.py\n   M /workspace/learning_grids/plotting.py\n\nSimulation and plotting of 32 fields per synapse\n\n------------------------------------------------------------------------\n\nr743 | weber | 2014-08-04 11:10:09 +0200 (Mon, 04 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\nSimulation: nice results with multiple fields per synapse\n\n------------------------------------------------------------------------\n\nr741 | weber | 2014-08-01 17:25:44 +0200 (Fri, 01 Aug 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n   M /workspace/learning_grids/figures/2dim_input_tuning.py\n   M /workspace/learning_grids/figures/plasticity_mechanism.py\n   D /workspace/learning_grids/figures.py\n   M /workspace/learning_grids/learning_grids.sublime-workspace\n   M /workspace/learning_grids/plot.py\n   M /workspace/learning_grids/plotting.py\n\nPlotting for poster\n\n------------------------------------------------------------------------\n\nr733 | weber | 2014-07-30 19:27:17 +0200 (Wed, 30 Jul 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n   M /workspace/learning_grids/figures.py\n   M /workspace/learning_grids/initialization.py\n   M /workspace/learning_grids/learning_grids.sublime-workspace\n   M /workspace/learning_grids/observables.py\n   M /workspace/learning_grids/plot.py\n   M /workspace/learning_grids/plotting.py\n\nType commit message hereâ€¦\n\n------------------------------------------------------------------------\n\nr729 | weber | 2014-07-23 14:33:52 +0200 (Wed, 23 Jul 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\nSimulation: 3D\n\n------------------------------------------------------------------------\n\nr728 | weber | 2014-07-23 13:45:00 +0200 (Wed, 23 Jul 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\nSimulation: 3 D. (outcome should be a 2d place cell)\n\n------------------------------------------------------------------------\n\nr726 | weber | 2014-07-23 13:35:23 +0200 (Wed, 23 Jul 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\nType commit message hereâ€¦\n\n------------------------------------------------------------------------\n\nr724 | weber | 2014-07-23 13:32:40 +0200 (Wed, 23 Jul 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\nType commit message hereâ€¦\n\n------------------------------------------------------------------------\n\nr723 | weber | 2014-07-23 13:31:32 +0200 (Wed, 23 Jul 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n\nType commit message hereâ€¦\n\n------------------------------------------------------------------------\n\nr722 | weber | 2014-07-23 13:22:51 +0200 (Wed, 23 Jul 2014) | 1 line\nChanged paths:\n   M /workspace/learning_grids/experiment_using_snep.py\n   M /workspace/learning_grids/figures.py\n\nTest 3d again",
			"settings":
			{
				"buffer_size": 6447,
				"line_ending": "Unix",
				"name": "SVN",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "plot.py",
			"settings":
			{
				"buffer_size": 7781,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Working copy: /Users/simonweber/programming/workspace\nCommand: svn diff -r 716:718 learning_grids/initialization.py\n================================================================================\n\nIndex: learning_grids/initialization.py\n===================================================================\n--- learning_grids/initialization.py	(revision 716)\n+++ learning_grids/initialization.py	(revision 718)\n@@ -296,9 +296,9 @@\n 			# For contour plots we pass grids with many positions\n 			# where len(position) > 2. For these grids we need to some along axis 4.\n 			if len(position) > 2:\n-				axis = 4\n+				axis = 3\n 			else:\n-				axis = 2\n+				axis = 1\n \n 			if symmetric_fields and not von_mises:\n 				def get_rates(position):\n@@ -311,7 +311,7 @@\n 									np.power(position - self.centers, 2),\n 								axis=axis)\n 							*self.twoSigma2),\n-							axis=axis-1)\n+							axis=axis)\n 					)\n 					return rates\n 			# For band cell simulations\n@@ -327,7 +327,7 @@\n 								-np.power(\n 									position[...,1] - self.centers[...,1], 2)\n 								*self.twoSigma2[1]),\n-						axis=axis-1)\n+						axis=axis)\n 					)\n 					return rates\n 			elif von_mises:\n@@ -347,14 +347,14 @@\n 									self.pi_over_r*(position[...,1]\n 									- self.centers[...,1]))\n 								),\n-							axis=axis-1)\n+							axis=axis)\n 					)\n 					return rates\n 		if self.dimensions == 3:\n 			if len(position) > 3:\n 				axis = 4\n 			else:\n-				axis = 2\n+				axis = 1\n \n 			def get_rates(position):\n 				rates = (\n@@ -374,9 +374,9 @@\n 								self.pi_over_r*(position[...,2]\n 								- self.centers[...,2]))\n 							),\n-					axis=axis-1)\n+					axis=axis)\n 				)\n-				return rates			\n+				return rates\n 		return get_rates\n \n \n@@ -396,6 +396,7 @@\n 		self.position = np.array([self.x, self.y, self.z][:self.dimensions])\n 		np.random.seed(int(self.params['sim']['seed_trajectory']))\n 		self.phi = np.random.random_sample() * 2. * np.pi\n+		self.theta = 2 * np.pi * np.random.random_sample() - np.pi\n 		self.move_right = True\n 		self.turning_probability = self.dt * self.velocity / self.persistence_length\n 		self.angular_sigma = np.sqrt(2.*self.velocity*self.dt/self.persistence_length)\n@@ -414,7 +415,7 @@\n 		x_space = np.linspace(-self.radius, self.radius, self.spacing)\n 		linspaces = [np.linspace(-self.radius, self.radius, self.spacing)\n 						for i in np.arange(self.dimensions)]\n-		Xs = np.meshgrid(*linspaces)\n+		Xs = np.meshgrid(*linspaces, indexing='ij')\n \n 		if self.dimensions == 1:\n 			self.positions_grid = np.empty(self.spacing)\n@@ -423,8 +424,8 @@\n 			self.positions_grid.shape = (self.spacing, 1, 1)\n \n 		if self.dimensions >= 2:\n-			self.positions_grid = np.dstack([x.T for x in Xs])\n-			self.positions_grid.shape = Xs[0].T.shape + (1, 1, self.dimensions)\n+			self.positions_grid = np.dstack([x for x in Xs])\n+			self.positions_grid.shape = Xs[0].shape + (1, 1, self.dimensions)\n \n 		for n, p in enumerate(self.populations):\n 			# We want different seeds for the centers of the two populations\n@@ -483,9 +484,9 @@\n 									-self.limit+self.input_space_resolution[i],\n 									self.limit, self.input_space_resolution[i])\n 										for i in np.arange(self.dimensions)]\n-				Xs = np.meshgrid(*(possible_positions))\n-				possible_positions_grid = np.dstack([x.T for x in Xs])\n-				possible_positions_grid.shape = Xs[0].T.shape + (1, 1, self.dimensions)\n+				Xs = np.meshgrid(*(possible_positions), indexing='ij')\n+				possible_positions_grid = np.dstack([x for x in Xs])\n+				possible_positions_grid.shape = Xs[0].shape + (1, 1, self.dimensions)\n 				rates_function = {}\n 				for p in self.populations:\n 					rates_function[p] = self.synapses[p].get_rates_function(\n@@ -507,40 +508,103 @@\n 		pass\n \n 	def move_persistently_semi_periodic(self):\n-		# Boundary conditions and movement are interleaved here\n-		pos = np.array([self.x, self.y])\n-		is_bound_trespassed = np.logical_or(pos < -self.radius, pos > self.radius)\n-		# Reflection at the corners\n-		if np.all(is_bound_trespassed):\n-			self.phi = np.pi - self.phi\n-			self.x += self.velocity_dt * np.cos(self.phi)\n-			if self.y > self.radius:\n+		\"\"\"Motion in box which is periodic along the last axis\n+\n+		Note: in 3D it might not be comletely istropic.\n+		\"\"\"\n+		if self.dimensions == 2:\n+			# Boundary conditions and movement are interleaved here\n+			pos = np.array([self.x, self.y])\n+			is_bound_trespassed = np.logical_or(pos < -self.radius, pos > self.radius)\n+			# Reflection at the corners\n+			if np.all(is_bound_trespassed):\n+				self.phi = np.pi - self.phi\n+				self.x += self.velocity_dt * np.cos(self.phi)\n+				if self.y > self.radius:\n+					self.y -= 2 * self.radius\n+				else:\n+					self.y += 2 * self.radius\n+			# Reflection at left and right\n+			elif is_bound_trespassed[0]:\n+				self.phi = np.pi - self.phi\n+				self.x += self.velocity_dt * np.cos(self.phi)\n+				self.y += self.velocity_dt * np.sin(self.phi)\n+			# Reflection at top and bottom\n+			elif self.y > self.radius:\n 				self.y -= 2 * self.radius\n+				self.x += self.velocity_dt * np.cos(self.phi)\n+				self.y += self.velocity_dt * np.sin(self.phi)\n+			elif self.y < -self.radius:\n+				self.y += 2 * self.radius\n+				self.x += self.velocity_dt * np.cos(self.phi)\n+				self.y += self.velocity_dt * np.sin(self.phi)\n+			# Normal move without reflection\n 			else:\n-				self.y += 2 * self.radius\n-		# Reflection at left and right\n-		elif is_bound_trespassed[0]:\n-			self.phi = np.pi - self.phi\n-			self.x += self.velocity_dt * np.cos(self.phi)\n-			self.y += self.velocity_dt * np.sin(self.phi)\n-		# Reflection at top and bottom\n-		elif self.y > self.radius:\n-			self.y -= 2 * self.radius\n-			self.x += self.velocity_dt * np.cos(self.phi)\n-			self.y += self.velocity_dt * np.sin(self.phi)\n-		elif self.y < -self.radius:\n-			self.y += 2 * self.radius\n-			self.x += self.velocity_dt * np.cos(self.phi)\n-			self.y += self.velocity_dt * np.sin(self.phi)\n-		# Normal move without reflection\n-		else:\n-			self.phi += self.angular_sigma * np.random.randn()\n-			self.x += self.velocity_dt * np.cos(self.phi)\n-			self.y += self.velocity_dt * np.sin(self.phi)\n+				self.phi += self.angular_sigma * np.random.randn()\n+				self.x += self.velocity_dt * np.cos(self.phi)\n+				self.y += self.velocity_dt * np.sin(self.phi)\n \n+		if self.dimensions == 3:\n+			x, y, z, r, phi, theta, angular_sigma, velocity_dt = (\n+				self.x, self.y, self.z, self.radius, self.phi, self.theta,\n+				self.angular_sigma, self.velocity_dt)\n+			out_of_bounds_y = (y < -r or y > r)\n+			out_of_bounds_x = (x < -r or x > r)\n+			out_of_bounds_z = (z < -r or z > r)\n+			if (out_of_bounds_x and out_of_bounds_y and out_of_bounds_z):\n+				phi += np.pi\n+				theta += np.pi\n+				if z > r:\n+					z -= 2 * r\n+				else:\n+					z += 2 * r\n+			# Reflection at the edges\n+			elif (out_of_bounds_x and out_of_bounds_y):\n+				phi += np.pi\n+				z += 0.5*velocity_dt * np.cos(theta)\n+			elif (out_of_bounds_x and out_of_bounds_z):\n+				theta += np.pi\n+				if z > r:\n+					z -= 2 * r\n+				else:\n+					z += 2 * r\n+			elif (out_of_bounds_y and out_of_bounds_z):\n+				theta += np.pi\n+				if z > r:\n+					z -= 2 * r\n+				else:\n+					z += 2 * r\n+			# Reflection at x\n+			elif out_of_bounds_x:\n+				phi = np.pi - phi\n+				z += 0.5*velocity_dt * np.cos(theta)\n+			# Reflection at y\n+			elif out_of_bounds_y:\n+				phi = -phi\n+				z += 0.5*velocity_dt * np.cos(theta)\n+			# Reflection at z\n+			elif z > r:\n+				z -= 2 * r\n+			elif z < -r:\n+				z += 2 * r\n+			# Normal move without reflection\n+			else:\n+				phi += angular_sigma * np.random.randn()\n+				theta += angular_sigma * np.random.randn()\n+				z += 0.5*velocity_dt * np.cos(theta)\n+			x += velocity_dt * np.cos(phi) * np.sin(theta)\n+			y += velocity_dt * np.sin(phi) * np.sin(theta)\n+			self.x, self.y, self.z, self.phi, self.theta = (\n+														x, y, z, phi, theta)\n+\n 	def move_persistently(self):\n 		\"\"\"\n 		Move rat along direction phi and update phi according to persistence length\n+\n+		Note: The 3D case hasn't yet been tested in a simulation. The 0.5\n+			in the z coordinate is not understood. Plotting\n+			indcates that it work though. However, I cannot guarantee that\n+			the random walk is completely isotropic.\n 		\"\"\"\n 		if self.dimensions == 1:\n 			if self.x > self.radius:\n@@ -576,6 +640,39 @@\n 			self.x += self.velocity_dt * np.cos(self.phi)\n 			self.y += self.velocity_dt * np.sin(self.phi)\n \n+		if self.dimensions == 3:\n+			x, y, z, r = self.x, self.y, self.z, self.radius\n+			out_of_bounds_y = (y < -r or y > r)\n+			out_of_bounds_x = (x < -r or x > r)\n+			out_of_bounds_z = (z < -r or z > r)\n+			if (out_of_bounds_x and out_of_bounds_y and out_of_bounds_z):\n+				self.phi += np.pi\n+				self.theta += np.pi\n+			# Reflection at the edges\n+			elif (out_of_bounds_x and out_of_bounds_y):\n+				self.phi += np.pi\n+			elif (out_of_bounds_x and out_of_bounds_z):\n+				self.theta += np.pi\n+			elif (out_of_bounds_y and out_of_bounds_z):\n+				self.theta += np.pi\n+			# Reflection at x\n+			elif out_of_bounds_x:\n+				self.phi = np.pi - self.phi\n+			# Reflection at y\n+			elif out_of_bounds_y:\n+				self.phi = -self.phi\n+			# Reflection at z\n+			elif out_of_bounds_z:\n+				self.theta = np.pi - self.theta\n+			# Normal move without reflection\n+			else:\n+				self.phi += self.angular_sigma * np.random.randn()\n+				self.theta += self.angular_sigma * np.random.randn()\n+			self.x += self.velocity_dt * np.cos(self.phi) * np.sin(self.theta)\n+			self.y += self.velocity_dt * np.sin(self.phi) * np.sin(self.theta)\n+			# This 0.5 is not understood\n+			self.z += 0.5*self.velocity_dt * np.cos(self.theta)\n+\n 	def move_persistently_circular(self):\n 		# Check if rat is outside and reflect it\n 		if self.x**2 + self.y**2 > self.radius_sq:\n@@ -699,12 +796,14 @@\n 				self.rates = {p: self.get_rates[p](self.x)\n 										for p in self.populations}\n 		if self.dimensions >= 2:\n+			position = np.array([self.x, self.y, self.z][:self.dimensions])\n 			if self.input_space_resolution.any != -1:\n-				index = (np.array([self.x, self.y]) + self.limit)/self.input_space_resolution - 1\n+				index = (position + self.limit)/self.input_space_resolution - 1\n+				# print self.get_rates['exc'](self.positions_grid).shape\n 				self.rates = {p: self.input_rates[p][tuple(index)]\n 										for p in self.populations}\n 			else:\n-				self.rates = {p: self.get_rates[p](np.array([self.x, self.y]))\n+				self.rates = {p: self.get_rates[p](position)\n 										for p in self.populations}\n \n \n@@ -872,7 +971,7 @@\n 			output_rates[output_rates<0] = 0\n 			return output_rates\n \n-		if self.dimensions == 2:\n+		if self.dimensions >= 2:\n 			if self.lateral_inhibition:\n 				output_rates = np.empty((spacing, spacing, self.output_neurons))\n 				start_pos = positions_grid[0, 0, 0, 0]\n@@ -924,16 +1023,18 @@\n 			else:\n 				output_rates = (\n 					np.tensordot(rawdata['exc']['weights'][frame],\n-										rates_grid['exc'], axes=([-1], [2]))\n+										rates_grid['exc'], axes=([-1], [self.dimensions]))\n 					- np.tensordot(rawdata['inh']['weights'][frame],\n-						 				rates_grid['inh'], axes=([-1], [2]))\n+						 				rates_grid['inh'], axes=([-1], [self.dimensions]))\n 				)\n-				# Transposing is now done in the contourplot\n-				# output_rates = np.transpose(output_rates)\n 				# Rectification\n 				output_rates[output_rates < 0] = 0.\n-				output_rates = output_rates.reshape(\n+				if self.dimensions == 2:\n+					output_rates = output_rates.reshape(\n 									spacing, spacing, self.output_neurons)\n+				elif self.dimensions == 3:\n+					output_rates = output_rates.reshape(\n+									spacing, spacing, spacing, self.output_neurons)\n 			return output_rates\n \n 	def run(self, rawdata_table=False, configuration_table=False):\n@@ -1008,29 +1109,30 @@\n 			rawdata[p]['weights'][0] = self.synapses[p].weights.copy()\n \n 		rawdata['positions'] = np.empty((np.ceil(\n-								n_time_steps / self.every_nth_step), 2))\n+								n_time_steps / self.every_nth_step), 3))\n 		rawdata['phi'] = np.empty(np.ceil(\n 								n_time_steps / self.every_nth_step))\n \n 		if self.dimensions == 1:\n-			rawdata['output_rate_grid'] = np.empty((np.ceil(\n-										n_time_steps / self.every_nth_step_weights),\n-											self.spacing, self.output_neurons))\n-			rawdata['output_rate_grid'][0] = self.get_output_rates_from_equation(\n-							frame=0, rawdata=rawdata, spacing=self.spacing,\n-							positions_grid=self.positions_grid,\n-							rates_grid=self.rates_grid,\n-							equilibration_steps=self.equilibration_steps)\n+			output_rate_grid_shape = (np.ceil(\n+									n_time_steps / self.every_nth_step_weights),\n+									self.spacing, self.output_neurons)\n+		elif self.dimensions == 2:\n+			output_rate_grid_shape = (np.ceil(\n+									n_time_steps / self.every_nth_step_weights),\n+									self.spacing, self.spacing,\n+											self.output_neurons)\n+		elif self.dimensions == 3:\n+			output_rate_grid_shape = (np.ceil(\n+									n_time_steps / self.every_nth_step_weights),\n+									self.spacing, self.spacing, self.spacing,\n+											self.output_neurons)\n \n-		if self.dimensions == 2:\n-			rawdata['output_rate_grid'] = np.empty((np.ceil(\n-										n_time_steps / self.every_nth_step_weights),\n-											self.spacing, self.spacing,\n-											self.output_neurons))\n-			rawdata['output_rate_grid'][0] = self.get_output_rates_from_equation(\n-							frame=0, rawdata=rawdata, spacing=self.spacing,\n-							positions_grid=self.positions_grid,\n-							rates_grid=self.rates_grid,\n+		rawdata['output_rate_grid'] = np.empty(output_rate_grid_shape)\n+		rawdata['output_rate_grid'][0] = self.get_output_rates_from_equation(\n+						frame=0, rawdata=rawdata, spacing=self.spacing,\n+						positions_grid=self.positions_grid,\n+						rates_grid=self.rates_grid,\n 							equilibration_steps=self.equilibration_steps)\n \n 		rawdata['output_rates'] = np.empty((np.ceil(\n@@ -1038,7 +1140,7 @@\n 									self.output_neurons))\n \n 		rawdata['phi'][0] = self.phi\n-		rawdata['positions'][0] = np.array([self.x, self.y])\n+		rawdata['positions'][0] = np.array([self.x, self.y, self.z])\n 		rawdata['output_rates'][0] = 0.0\n \n 		if self.lateral_inhibition:\n@@ -1062,7 +1164,7 @@\n 				index = step / self.every_nth_step\n 				# print 'step = %f' % step\n 				# Store Positions\n-				rawdata['positions'][index] = np.array([self.x, self.y])\n+				rawdata['positions'][index] = np.array([self.x, self.y, self.z])\n 				rawdata['phi'][index] = np.array(self.phi)\n 				rawdata['output_rates'][index] = self.output_rate\n 				# print 'current step: %i' % step",
			"settings":
			{
				"buffer_size": 14365,
				"line_ending": "Unix",
				"name": "SVN Diff (716:718 learning_grids/initialization.py)",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "figures/2dim_input_tuning.py",
			"settings":
			{
				"buffer_size": 3922,
				"line_ending": "Unix"
			}
		},
		{
			"file": "plotting.py",
			"settings":
			{
				"buffer_size": 42635,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Working copy: /Users/simonweber/programming/workspace\nCommand: svn diff -r 741 learning_grids/plotting.py\n================================================================================\n\nIndex: learning_grids/plotting.py\n===================================================================\n--- learning_grids/plotting.py	(revision 741)\n+++ learning_grids/plotting.py	(working copy)\n@@ -157,8 +157,8 @@\n 		# self.box_linspace = np.linspace(-self.radius, self.radius, 200)\n 		# self.time = np.arange(0, self.simulation_time + self.dt, self.dt)\n 		self.colors = {'exc': '#D7191C', 'inh': '#2C7BB6'}\n-		# self.population_name = {'exc': r'excitatory', 'inh': 'inhibitory'}\n-		# self.populations = ['exc', 'inh']\n+		self.population_name = {'exc': r'excitatory', 'inh': 'inhibitory'}\n+		self.populations = ['exc', 'inh']\n 		# self.fig = plt.figure()\n \n 	def time2frame(self, time, weight=False):\n@@ -698,14 +698,14 @@\n 			analytics.linear_stability_analysis.plot_grid_spacing_vs_parameter(\n 				self.target_rate, self.w0E, self.eta_inh, self.sigma_inh,\n 				self.n_inh, self.eta_exc, self.sigma_exc, self.n_exc,\n-				self.boxlength)\n+				self.boxlength, parameter_name)\n 			# Set xlabel manually\n-			plt.xlabel(r'Excitatory width $\\sigma_{\\mathrm{E}}$')\n-		fig = plt.gcf()\n-		fig.set_size_inches(5.6,4)\n-		ax = plt.gca()\n-		ax.set_xticks(np.linspace(0.015, 0.045, 3))\n-		plt.ylim(0.188, 0.24)\n+			# plt.xlabel(r'Excitatory width $\\sigma_{\\mathrm{E}}$')\n+		# fig = plt.gcf()\n+		# fig.set_size_inches(5.6,4)\n+		# ax = plt.gca()\n+		# ax.set_xticks(np.linspace(0.015, 0.045, 3))\n+		# plt.ylim(0.188, 0.24)\n 		# plt.ylim(0.18, 0.84)\n \n 	def plot_correlogram(self, time, spacing=None, mode='full', method=False,\n@@ -759,7 +759,9 @@\n 									output_rates, output_rates, mode=mode)\n 				corr_linspace = np.linspace(-corr_radius, corr_radius, corr_spacing)\n 				X_corr, Y_corr = np.meshgrid(corr_linspace, corr_linspace)\n-				V = np.linspace(-0.21, 1.0, 40)\n+				# V = np.linspace(-0.21, 1.0, 40)\n+				V = 40\n+				print correlogram\n 				plt.contourf(X_corr.T, Y_corr.T, correlogram, V)\n 				# plt.contourf(X_corr.T, Y_corr.T, correlogram, 30)\n 				# cb = plt.colorbar()\n@@ -777,9 +779,9 @@\n 						circle = plt.Circle((0,0), r, ec=c, fc='none', lw=2,\n 												linestyle='dashed')\n 						ax.add_artist(circle)\n-				ticks = np.linspace(-0.2, 1.0, 2)\n+				ticks = np.linspace(-0.05, 1.0, 2)\n 				cb = plt.colorbar(format='%.1f', ticks=ticks)\n-				# cb.set_label('Correlation')\n+				cb.set_label('Correlation')\n 				# plt.title(title, fontsize=8) \n \n 	def get_output_rates(self, frame, spacing, from_file=False, squeeze=False):\n@@ -929,15 +931,16 @@\n 				# plt.yticks(['rho'])\n 				# title = 'time = %.0e' % (frame*self.every_nth_step_weights)\n 				# plt.title(title, size=16)\n-				plt.ylim([0, 5.0])\n+				# plt.ylim([0, 10.0])\n 				plt.xticks([])\n-				plt.locator_params(axis='y', nbins=4)\n-				ax.set_yticks((0, self.params['out']['target_rate'], 2, 4))\n-				ax.set_yticklabels((0, r'$\\rho_0$', 2, 4), fontsize=18)\n-				# plt.xlabel('Position')\n+				plt.locator_params(axis='y', nbins=3)\n+				# ax.set_yticks((0, self.params['out']['target_rate'], 5, 10))\n+				# ax.set_yticklabels((0, r'$\\rho_0$', 5, 10), fontsize=18)\n+				plt.xlabel('Position')\n 				plt.ylabel('Firing rate')\n 				fig = plt.gcf()\n-				fig.set_size_inches(5,2.1)\n+				# fig.set_size_inches(5,2.1)\n+				fig.set_size_inches(5,3.5)\n \n 			if self.dimensions >= 2:\n 				# title = r'$\\vec \\sigma_{\\mathrm{inh}} = (%.2f, %.2f)$' % (self.params['inh']['sigma_x'], self.params['inh']['sigma_y'])\n@@ -1054,30 +1057,40 @@\n 				number of cells of the specific type, to make it fit into\n 				the frame (see note in fields_times_weighs)\n 		\"\"\"\n-		x = self.box_linspace\n-		# Loop over different synapse types and color tuples\n-		plt.xlim([-self.radius, self.radius])\n-		plt.xlabel('position')\n-		plt.ylabel('firing rate')\n-		# plt.title('firing rate of')\n-		for t in self.populations:\n-			title = '%i fields per synapse' % len(self.rawdata[t]['centers'][neuron])\n-			# plt.title(title)\n-			legend = self.population_name[t]\n-			summe = 0\n-			for c, s in np.nditer([self.rawdata[t]['centers'][neuron], self.rawdata[t]['sigmas'][neuron]]):\n-				gaussian = scipy.stats.norm(loc=c, scale=s).pdf\n-				if show_each_field:\n-					plt.plot(x, gaussian(x), color=self.colors[t])\n-				summe += gaussian(x)\n-			# for c, s in np.nditer([self.rawdata[t]['centers'][5], self.rawdata[t]['sigmas'][5]]):\n-			# 	gaussian = scipy.stats.norm(loc=c, scale=s).pdf\n-			# 	if show_each_field:\n-			# 		plt.plot(x, gaussian(x), color=self.colors[t], label=legend)\n-			# 	summe += gaussian(x)\n-			if show_sum:\n-				plt.plot(x, summe, color=self.colors[t], linewidth=4, label=legend)\n-			plt.legend(bbox_to_anchor=(1, 1), loc='upper right')\n+		for psp in self.psps:\n+			self.set_params_rawdata_computed(psp, set_sim_params=True)\n+			# Loop over different synapse types and color tuples\n+			plt.xlim([-self.radius, self.radius])\n+			x = np.linspace(-self.radius, self.radius, 501)\n+			plt.xticks([])\n+			plt.yticks([])\n+			plt.axis('off')\n+			# plt.xlabel('position')\n+			# plt.ylabel('firing rate')\n+			# plt.title('firing rate of')\n+			self.populations = ['inh']\n+			for t in self.populations:\n+				title = '%i fields per synapse' % len(self.rawdata[t]['centers'][neuron])\n+				# plt.title(title)\n+				legend = self.population_name[t]\n+				summe = 0\n+				for c, s in np.nditer([self.rawdata[t]['centers'][neuron], self.rawdata[t]['sigmas'][neuron]]):\n+					gaussian = scipy.stats.norm(loc=c, scale=s).pdf\n+					if show_each_field:\n+						plt.plot(x, gaussian(x), color=self.colors[t])\n+					summe += gaussian(x)\n+				# for c, s in np.nditer([self.rawdata[t]['centers'][5], self.rawdata[t]['sigmas'][5]]):\n+				# 	gaussian = scipy.stats.norm(loc=c, scale=s).pdf\n+				# 	if show_each_field:\n+				# 		plt.plot(x, gaussian(x), color=self.colors[t], label=legend)\n+				# 	summe += gaussian(x)\n+				if show_sum:\n+					plt.plot(x, summe, color=self.colors[t], linewidth=2, label=legend)\n+				# plt.legend(bbox_to_anchor=(1, 1), loc='upper right')\n+		y0, y1 = plt.ylim()\n+		plt.ylim([-1, y1+1])\n+		fig = plt.gcf()\n+		fig.set_size_inches(3,2)\n 		return\n \n 	def weights_vs_centers(self, time, syn_type='exc'):",
			"settings":
			{
				"buffer_size": 6212,
				"line_ending": "Unix",
				"name": "SVN Diff (741:WORKING learning_grids/plotting.py)",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "observables.py",
			"settings":
			{
				"buffer_size": 8985,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 87.0,
		"selected_items":
		[
			[
				"svn file diff",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn file dif",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn file log",
				"SVN: (File) Log"
			],
			[
				"svn fol",
				"SVN: (Folder) Commit"
			],
			[
				"svn folder co",
				"SVN: (Folder) Commit"
			],
			[
				"svn com",
				"SVN: (Folder) Commit"
			],
			[
				"svn folder",
				"SVN: (Folder) Commit"
			],
			[
				"svn fold",
				"SVN: (Folder) Commit"
			],
			[
				"svn file di",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn fileco",
				"SVN: (File) Commit"
			],
			[
				"svn file com",
				"SVN: (File) Commit"
			],
			[
				"svn file co",
				"SVN: (File) Commit"
			],
			[
				"svn file ad",
				"SVN: (File) Add"
			],
			[
				"SVN FILE COM",
				"SVN: (File) Commit"
			],
			[
				"svn file",
				"SVN: (File) Add"
			],
			[
				"svn filea",
				"SVN: (File) Add"
			],
			[
				"svn add",
				"SVN: Add, Interactiveâ€¦"
			],
			[
				"svn dele",
				"SVN: Delete, Interactiveâ€¦"
			],
			[
				"svn file d",
				"SVN: (File) Delete"
			],
			[
				"svn file add",
				"SVN: (File) Add"
			],
			[
				"svn move",
				"SVN: (File) Moveâ€¦"
			],
			[
				"svn ov",
				"SVN: (File) Moveâ€¦"
			],
			[
				"svn file comm",
				"SVN: (File) Commit"
			],
			[
				"svn folder lo",
				"SVN: (Folder) Log"
			],
			[
				"svn file lo",
				"SVN: (File) Log"
			],
			[
				"svn fid",
				"SVN: (File) Diff"
			],
			[
				"svn  fole",
				"SVN: (Folder) Commit"
			],
			[
				"svn co",
				"SVN: (File) Commit"
			],
			[
				"svn comm",
				"SVN: (File) Commit"
			],
			[
				"svn folde",
				"SVN: (Folder) Commit"
			],
			[
				"svn folder ",
				"SVN: (Folder) Commit"
			],
			[
				"svn folder dif",
				"SVN: (Folder) Diff"
			],
			[
				"svn file update",
				"SVN: (File) Update"
			],
			[
				"svn diff",
				"SVN: (File) Diff"
			],
			[
				"svn folder di",
				"SVN: (Folder) Diff"
			],
			[
				"svn fo",
				"SVN: (Folder) Commit"
			],
			[
				"svn filecom",
				"SVN: (File) Commit"
			],
			[
				"svn file diff cus",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn file diff ",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn diff cus",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn file diff s",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn folder com",
				"SVN: (Folder) Commit"
			],
			[
				"svn folecom",
				"SVN: (Folder) Commit"
			],
			[
				"svn file diff	",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn fole co",
				"SVN: (Folder) Commit"
			],
			[
				"svn file diff cu",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn file difcu",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn fiecom",
				"SVN: (File) Commit"
			],
			[
				"s",
				"SublimeREPL: Octave"
			],
			[
				"packaconin",
				"Package Control: Install Package"
			],
			[
				"sublimelinter",
				"Preferences: SublimeLinter Settings â€“ Default"
			],
			[
				"svn foldco",
				"SVN: (Folder) Commit"
			],
			[
				"svn diff cu",
				"SVN: (Folder) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn folder log",
				"SVN: (Folder) Log"
			],
			[
				"svn log",
				"SVN: (File) Log"
			],
			[
				"svn file ",
				"SVN: (File) Log"
			],
			[
				"svn dif",
				"SVN: (File) Diff"
			],
			[
				"svn fil",
				"SVN: (File) Commit"
			],
			[
				"svn file df",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"lint",
				"SublimeLinter: Show Error List"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"svn foleco",
				"SVN: (Folder) Commit"
			],
			[
				"svn fie di",
				"SVN: (File) Diff"
			],
			[
				"svn file diff c",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn fodco",
				"SVN: (Folder) Commit"
			],
			[
				"svn df",
				"SVN: (File) Diff"
			],
			[
				"svn fildiff",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn foldde",
				"SVN: (Folder) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn c",
				"SVN: (Folder) Commit"
			],
			[
				"svncom",
				"SVN: (Folder) Commit"
			],
			[
				"svn file diff,",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn fodf",
				"SVN: (Folder) Diff"
			],
			[
				"svn stat",
				"SVN: (Folder) Status"
			],
			[
				"svn checkout",
				"SVN: Checkoutâ€¦"
			],
			[
				"svn diff cust",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn custom",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn reviso",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svncomm",
				"SVN: (Folder) Commit"
			],
			[
				"svn commit",
				"SVN: Commitâ€¦"
			],
			[
				"svn status",
				"SVN: Status"
			],
			[
				"folder com",
				"SVN: (Folder) Commit"
			],
			[
				"svn fil diff",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn fildif",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn fold com",
				"SVN: (Folder) Commit"
			],
			[
				"svn fold comm",
				"SVN: (Folder) Commit"
			],
			[
				"svn folcomm",
				"SVN: (Folder) Commit"
			],
			[
				"svn fild",
				"SVN: (File) Diff"
			],
			[
				"svn fodcomm",
				"SVN: (Folder) Commit"
			],
			[
				"svn update",
				"SVN: (Folder) Update"
			],
			[
				"svn filde",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn sta",
				"SVN: (Folder) Status"
			],
			[
				"svn dff",
				"SVN: (Folder) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn folder diff",
				"SVN: (Folder) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn stats",
				"SVN: Status"
			],
			[
				"svn fo diff",
				"SVN: (Folder) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn focomm",
				"SVN: (Folder) Commit"
			],
			[
				"svn fil com",
				"SVN: (File) Commit"
			],
			[
				"svn diff ",
				"SVN: (Folder) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn statu",
				"SVN: (Folder) Status"
			],
			[
				"svn folder comm",
				"SVN: (Folder) Commit"
			],
			[
				"svn folcom",
				"SVN: (Folder) Commit"
			],
			[
				"svn",
				"SVN: Commitâ€¦"
			],
			[
				"svn foldc",
				"SVN: (Folder) Commit"
			],
			[
				"svn diff re",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn diff rev",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn diff r",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn diff revi",
				"SVN: (File) Diff, Custom Revisionsâ€¦"
			],
			[
				"svn ",
				"SVN: Commitâ€¦"
			],
			[
				"svn comm	",
				"SVN: (Folder) Commit"
			],
			[
				"stat",
				"SVN: Status"
			],
			[
				"svn upda",
				"SVN: (File) Update"
			],
			[
				"svn filc",
				"SVN: (File) Commit"
			],
			[
				"svn stt",
				"SVN: (Folder) Status"
			],
			[
				"replrun",
				"SublimeREPL: Python - RUN current file"
			],
			[
				"repl ru",
				"SublimeREPL: Python - RUN current file"
			],
			[
				"repl run",
				"SublimeREPL: Python - RUN current file"
			],
			[
				"repl",
				"SublimeREPL: Python"
			],
			[
				"folder stat",
				"SVN: (Folder) Status"
			],
			[
				"svn di",
				"SVN: Diff"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"linter",
				"SublimeLinter: Disable Linting"
			],
			[
				"svn ad",
				"SVN: (File) Add"
			],
			[
				"edit",
				"Project: Edit"
			],
			[
				"projec",
				"Project: Save As"
			],
			[
				"save",
				"Project: Save As"
			],
			[
				"proje",
				"Project: Add Folder"
			]
		],
		"width": 602.0
	},
	"console":
	{
		"height": 260.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": true,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/simonweber/programming/workspace/learning_grids/initialization.py",
		"/Users/simonweber/programming/workspace/learning_grids/analytics/linear_stability_analysis.py",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407230779/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407229260/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407229148/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407229065/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407228869/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407226959/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407226924/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407186356/SVN",
		"/Users/simonweber/Desktop/tmp_old_revision/learning_grids/experiment_using_snep.py",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407184928/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407171647/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407171575/SVN",
		"/Users/simonweber/programming/workspace/learning_grids/figures/2dim_cell_types.py",
		"/Users/simonweber/programming/workspace/learning_grids/figures/2dim_input_tuning.py",
		"/Users/simonweber/programming/workspace/learning_grids/figures/1d_center_surround.py",
		"/Users/simonweber/programming/workspace/learning_grids/figures/input_tuning.py",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407147715/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1407143387/SVN",
		"/Users/simonweber/programming/workspace/learning_grids/plotting.py",
		"/Users/simonweber/programming/workspace/learning_grids/figures/plasticity_mechanism.py",
		"/Users/simonweber/programming/workspace/learning_grids/experiment_using_snep.py",
		"/Users/simonweber/programming/workspace/learning_grids/plot.py",
		"/Users/simonweber/programming/workspace/learning_grids/figures/Head_direaction_cell.py",
		"/Users/simonweber/programming/workspace/learning_grids/play.py",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406890301/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406890290/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406822030/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406821969/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406815377/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406794937/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406794922/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406794901/SVN",
		"/Users/simonweber/programming/workspace/learning_grids/figures/figures.py",
		"/Users/simonweber/programming/workspace/learning_grids/figures/__init__.py",
		"/Users/simonweber/programming/workspace/learning_grids/analytics/imports.py",
		"/Users/simonweber/programming/workspace/general_utils/snep_plotting.py",
		"/Users/simonweber/programming/workspace/learning_grids/snep/tables/paramspace.py",
		"/Users/simonweber/programming/workspace/learning_grids/figures.py",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406793240/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406741233/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406727772/SVN",
		"/Users/simonweber/programming/workspace/learning_grids/snep/tables/network/network_base.py",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406714046/SVN",
		"/Users/simonweber/tex_and_unix/TeX/Vorlagen/Vollmacht/Brief/Briefvorlage.tex",
		"/Users/simonweber/master_thesis/svn/my_depletion_forces_in_active_matter/my_draft_phase_segregation_different_activity/Phasesegregation_based_on_different_activity.tex",
		"/Users/simonweber/Downloads/integral_demo.py",
		"/Users/simonweber/programming/workspace/learning_grids/observables.py",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406134163/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406118823/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406115851/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406115845/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406115617/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406115323/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406115278/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406115160/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406115091/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406114565/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406049364/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406037686/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406037469/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406029625/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1406028093/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405938574/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405934022/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405891713/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405611101/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405610565/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405609386/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405606151/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405603394/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405603382/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405603287/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405603190/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405603143/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405523803/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405511331/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405505648/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405505631/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405505612/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405444300/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405411210/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405071451/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405071383/SVN",
		"/Users/simonweber/doktor/TeX/learning_grids/stability_analysis/model.tex",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405068894/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405068728/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405068569/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1405068361/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404996113/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404991328/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404991275/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404991123/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404988687/SVN",
		"/Users/simonweber/programming/workspace/attractor_network/attractor_network.sublime-workspace",
		"/Users/simonweber/programming/workspace/.metadata/.plugins/com.python.pydev.analysis/python_v1_o8dzyfh0xaoypv7z02dovgxt/python.pydevsysteminfo",
		"/Users/simonweber/programming/workspace/learning_grids/learning_grids.sublime-workspace",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404984098/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404981352/SVN",
		"/Users/simonweber/programming/workspace/learning_grids/snep/tables/results.py",
		"/Users/simonweber/programming/workspace/learning_grids/snep/tables/experiment.py",
		"/Users/simonweber/programming/workspace/learning_grids/snep/experiment.py",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404837051/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404829303/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404818450/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404818273/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404728478/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404382512/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404317833/SVN",
		"/Users/simonweber/programming/workspace/learning_grids/snep/test2.py",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404310975/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404305787/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404305718/SVN",
		"/Users/simonweber/programming/workspace/playground/von_mises_normalization.py",
		"/Users/simonweber/doktor/TeX/learning_grids/stability_analysis/stability_analysis.tex",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404232376/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1404231285/SVN",
		"/Users/simonweber/programming/workspace/learning_grids/snep/utils.py",
		"/Users/simonweber/doktor/TeX_and_figures/learning_grids/2dim_Gaussians/2dim_Gaussians.py",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1403782867/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1403780911/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1403773510/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1403773405/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1403772358/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1403712404/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1403712150/SVN",
		"/var/folders/st/wch4q6455rvgt1tzlt6b4h9h0000gn/T/sublime-svn-1403711928/SVN"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"/Users/simonweber/programming/workspace",
			"/Users/simonweber/programming/workspace/learning_grids/, -/Users/simonweber/programming/workspace/learning_grids/snep/*, -/Users/simonweber/programming/workspace/learning_grids/.metadata/*",
			"/Users/simonweber/programming/workspace/learning_grids/, /Users/simonweber/programming/workspace/learning_grids/snep/*, -/Users/simonweber/programming/workspace/learning_grids/.metadata/*",
			"/Users/simonweber/programming/workspace/learning_grids/, -/Users/simonweber/programming/workspace/learning_grids/snep/*, -/Users/simonweber/programming/workspace/learning_grids/.metadata/*",
			"/Users/simonweber/programming/workspace/learning_grids/, -/Users/simonweber/programming/workspace/learning_grids/snep/*",
			"/Users/simonweber/programming/workspace/learning_grids/snep",
			"/Users/simonweber/programming/workspace/learning_grids, -/Users/simonweber/programming/workspace/learning_grids/snep",
			"/Users/simonweber/programming/workspace/",
			"/Users/simonweber/programming/workspace/snep",
			"/Users/simonweber/programming/workspace",
			"/Users/simonweber/programming/workspace/snep",
			"/Users/simonweber/programming/workspace/",
			"/Users/simonweber/programming/workspace/snep/snep_projects/snep/tables",
			"<project>",
			"/Users/simonweber/master_thesis/thesis/TeX/",
			"/Users/simonweber/master_thesis/thesis/TeX/chapters",
			"",
			"/Users/simonweber/master_thesis/thesis/TeX/figures_tex",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"margin",
			"legend",
			"numpoint",
			"ha",
			"hand",
			"handl",
			"locator",
			"ylabel",
			"plot_mean",
			"n_values",
			"norm",
			"mpl",
			"size",
			"fontsize",
			"sexc",
			"sinh",
			"motion",
			"twoSigm",
			"plot_grid_spacing",
			"locals",
			"varied_parameter",
			"varied_para",
			"n_values",
			"varied_para",
			"grid",
			"subprocdir",
			"fonts",
			"wave",
			"get_ylim",
			"transpa",
			"figsize",
			"population_name",
			"popluation_name",
			"populations",
			"radius",
			"box_linspace",
			"field",
			"fields_per",
			"maximal_rate",
			"gnuplot",
			"xticks",
			"label",
			"ylabel",
			"membrane",
			"size",
			"figsize",
			"fonts",
			"mask",
			"output_rate_grid",
			"output_rates_grid",
			"setting",
			"tigh",
			"frame",
			"inputs",
			"populations",
			"fig",
			"ylabel",
			"fontsize=12",
			"12",
			"tick",
			"ylim",
			"loc",
			"ylim",
			"dotted",
			"dashed",
			"current['inh']",
			"rho",
			"alias",
			"input_space_resolution",
			"alias",
			"np.ceil(",
			"np.empty((np.ceil(",
			"shape",
			"rates_grid",
			"from_file",
			"tensordot",
			"input_spa",
			"in",
			"input",
			"from_file",
			"angl",
			".T",
			"margin",
			"marg",
			"margins",
			"target_rate",
			"legend",
			"gauss",
			"print",
			"distortion",
			".T",
			"spacing",
			"here",
			"bb",
			"layout",
			"figsize",
			"fig_size",
			"figsize",
			"save",
			"rawdata['positions']",
			"dimension",
			".T",
			"input_rate",
			"input_rates",
			"self.get_rates_grid",
			"self.get_rates",
			"input_rates",
			"self.x, self.y",
			"phi",
			"corr",
			"eta",
			"self.",
			"angular_sigma",
			"self.",
			"self.position",
			"self.position ",
			"self.position",
			"self.z",
			"self.rates",
			"dimension",
			"dimensions",
			"twoSigma2_y",
			"twoSigma2_x",
			"sigma_y",
			"sigma_x",
			"self.sigma",
			"sigma_x",
			"dimension"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"center_overlap",
			"",
			"self.input_space_resolution",
			"boxlength",
			"n_inh",
			"n_exc",
			"sigma_exc",
			"sigma_inh",
			"sigma_exc",
			"eta_exc",
			"eta_inh",
			"target_rate",
			"boxlength",
			"n_exc",
			"n_inh",
			"sigma_exc",
			"sigma_inh",
			"eta_exc",
			"eta_inh",
			"a",
			"s2",
			"s1",
			"time2frame",
			"number_desired",
			"n",
			"target_rate",
			"seed_network",
			"seed_trajectory",
			"start_frame",
			"self.params['inh']['sigma']",
			"self.params['exc']['sigma']",
			"self.rawdata['inh']['sigmas']",
			"self.rawdata['exc']['sigmas']",
			"self.rawdata['inh']['centers']",
			"self.rawdata['exc']['centers']",
			"self.rawdata['inh']['weights']",
			"self.rawdata['exc']['weights']",
			"rawdata_table",
			"inh_weights",
			"exc_weights",
			"a_f_tuples",
			"#",
			"",
			"Is",
			"UInt",
			"Float",
			"seed_dirs",
			"clusters_together",
			"clusters_dms",
			"clusters_particles",
			"fileh",
			"maximal_cluster_size_vs_time_20000",
			"i7s03",
			"cha:",
			"strong4",
			"strong3",
			"strong2",
			"strong1",
			"theta",
			"\\\\mathcal{V}",
			"Vri",
			"\\\\mathcal{V}",
			"\\mathcal{V}",
			"\\\\Meq",
			"\\Meq",
			"probability density function",
			"height=5.5",
			"height=5.6",
			"height=5.8",
			"height=5.4",
			"height=5.25",
			"hspace\\{0.1",
			"\\\\emph{intrinsic}",
			"\\emph{intrinsic}",
			"Dtilde=0",
			"Dtilde=10^{-4}",
			"Dtilde=10^{-3}",
			"Dtilde=10^{-2}",
			"Dtilde=10^{-1}",
			"Dtilde=10^0",
			"Dtilde",
			"Ballistic",
			"Diffusive",
			"\\$\\\\rho",
			"Eq.~\\\\eqref",
			"Eq.\\\\eqref",
			"Eq.\\eqref",
			"Dtilde=0.001",
			"Dtilde=0.01",
			"Dtilde=0.1",
			"Dtilde=1.0",
			"",
			"strong",
			"",
			"\n\\definecolor{strong2}{HTML}{0x4DAF4A;}\n\\definecolor{strong3}{HTML}{0x984EA3;}\n\\definecolor{strong4}{HTML}{0xFF7F00;}\n\\definecolor{strong5}{HTML}{0xA65628;}\n\\definecolor{strong6}{HTML}{0xF781BF;}\n\\definecolor{strong7}{HTML}{0x999999;}\n\\definecolor{strong8}{HTML}{0xE41A1C;}",
			"\\definecolor{strong1}{HTML}{0x377EB8;}\n\\definecolor{strong2}{HTML}{0x4DAF4A;}\n\\definecolor{strong3}{HTML}{0x984EA3;}\n\\definecolor{strong4}{HTML}{0xFF7F00;}\n\\definecolor{strong5}{HTML}{0xA65628;}\n\\definecolor{strong6}{HTML}{0xF781BF;}\n\\definecolor{strong7}{HTML}{0x999999;}\n\\definecolor{strong8}{HTML}{0xE41A1C;}",
			"\\definecolor{strong1}{HTML}{0x377EB8;}\n\\definecolor{strong2}{HTML}{0x4DAF4A;}\n\\definecolor{strong3}{HTML}{0x984EA3;}\n\\definecolor{strong4}{HTML}{0xFF7F00;}\n\\definecolor{strong5}{HTML}{0xA65628;}\n\\definecolor{strong6}{HTML}{0xF781BF;}\n\\definecolor{strong7}{HTML}{0x999999;}\n\\definecolor{strong8}{HTML}{0xE41A1C;}\n",
			"}",
			"strong",
			"\\definecolor{qual1}{HTML}{A6CEE3}\n\\definecolor{qual2}{HTML}{1F78B4}\n\\definecolor{qual3}{HTML}{B2DF8A}\n\\definecolor{qual4}{HTML}{33A02C}\n\\definecolor{qual5}{HTML}{FB9A99}\n\\definecolor{qual6}{HTML}{E31A1C}\n\\definecolor{qual7}{HTML}{FDBF6F}",
			"t_sampling",
			"MainFolder",
			"text",
			"\\BoxPlot",
			"MyString",
			"MyDir"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "experiment_using_snep.py",
					"settings":
					{
						"buffer_size": 17770,
						"regions":
						{
						},
						"selection":
						[
							[
								8463,
								8463
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110.0
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"W191",
								"E126"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublime_auto_complete": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2.0,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3090.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"settings":
					{
						"buffer_size": 6447,
						"regions":
						{
						},
						"selection":
						[
							[
								6447,
								6447
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"color_scheme": "Packages/Color Scheme - Default/Monokai.tmTheme",
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110.0
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"W191",
								"E126"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublime_auto_complete": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2.0,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"svn_params":
							[
								"/usr/bin/svn",
								"log",
								"-v",
								"-l",
								"20",
								"learning_grids/experiment_using_snep.py"
							],
							"svn_wc_dir": "/Users/simonweber/programming/workspace",
							"svn_wc_path": "learning_grids/experiment_using_snep.py",
							"syntax": "Packages/SVN/color/SVN Log.hidden-tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "plot.py",
					"settings":
					{
						"buffer_size": 7781,
						"regions":
						{
						},
						"selection":
						[
							[
								5897,
								5897
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110.0
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"W191",
								"E126"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublime_auto_complete": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2.0,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"settings":
					{
						"buffer_size": 14365,
						"regions":
						{
						},
						"selection":
						[
							[
								1224,
								1224
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"color_scheme": "Packages/Color Scheme - Default/Monokai.tmTheme",
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110.0
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"W191",
								"E126"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublime_auto_complete": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2.0,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"svn_params":
							[
								"/usr/bin/svn",
								"diff",
								"-r",
								"716:718",
								"learning_grids/initialization.py"
							],
							"svn_wc_dir": "/Users/simonweber/programming/workspace",
							"svn_wc_path": "learning_grids/initialization.py",
							"syntax": "Packages/SVN/color/SVN Diff.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 124.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "figures/2dim_input_tuning.py",
					"settings":
					{
						"buffer_size": 3922,
						"regions":
						{
						},
						"selection":
						[
							[
								1825,
								1825
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110.0
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"W191",
								"E126"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublime_auto_complete": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2.0,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 729.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 5,
					"file": "plotting.py",
					"settings":
					{
						"buffer_size": 42635,
						"regions":
						{
						},
						"selection":
						[
							[
								28269,
								28269
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110.0
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"W191",
								"E126"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublime_auto_complete": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2.0,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 6.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"settings":
					{
						"buffer_size": 6212,
						"regions":
						{
						},
						"selection":
						[
							[
								2788,
								2788
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"color_scheme": "Packages/Color Scheme - Default/Monokai.tmTheme",
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110.0
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"W191",
								"E126"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublime_auto_complete": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2.0,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"svn_params":
							[
								"/usr/bin/svn",
								"diff",
								"-r",
								"741",
								"learning_grids/plotting.py"
							],
							"svn_wc_dir": "/Users/simonweber/programming/workspace",
							"svn_wc_path": "learning_grids/plotting.py",
							"syntax": "Packages/SVN/color/SVN Diff.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 962.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "observables.py",
					"settings":
					{
						"buffer_size": 8985,
						"regions":
						{
						},
						"selection":
						[
							[
								1565,
								1565
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110.0
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"W191",
								"E126"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2.0,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 743.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 174.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"csv",
				"utils/csv_functions.py"
			],
			[
				"",
				"/Users/simonweber/master_thesis/scripts/normalize_pair_correlation.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 240.0,
	"status_bar_visible": true
}
